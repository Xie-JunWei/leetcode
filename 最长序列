class solution {
public:
	double findkth(vector<int>::const_iterator a, vector<int>::const_iterator b, int m , int n, int k)
	{
		if (m < n) return findkth(b, a, n, m, k);
		if (n == 0)  return a[k - 1];
		if (k == 1)  return a[0] > b[0] ? b[0] : a[0];
		int ib = k / 2 > n ? n : k / 2;
		int ia = k - ib;
		if (a[ia - 1] < b[ib-1]) return findkth(a + ia, b, m - ia, n, k - ia);
		else if (a[ia - 1] > b[ib-1])return findkth(a, b + ib, m, n - ib, k - ib);
		else return a[ia - 1];
	}
	double findmediansortedarrays(vector<int>& nums1, vector<int>& nums2) {
		int m = nums1.size();
		int n = nums2.size();
		int k = m + n;
		if (k % 2 != 0)
		{
			k = k / 2 + 1;
			return findkth(nums1.begin(), nums2.begin(), m, n, k);
		}
		else
		{
			k = k / 2;
			return (findkth(nums1.begin(), nums2.begin(), m, n, k) + findkth(nums1.begin(), nums2.begin(), m, n,k + 1)) / 2.0;
		}
	}
};
